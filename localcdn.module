<?php

use Drupal\localcdn\Source\Source_ExternalWithQuery;
use Drupal\localcdn\Source\Source_GenericExternal;
use Drupal\localcdn\Source\SourceInterface;

/**
 * Implements hook_module_implements_alter().
 *
 * @param array $implementations
 * @param string $hook
 */
function localcdn_module_implements_alter(array &$implementations, string $hook) {
  switch ($hook) {
    case 'css_alter':
    case 'js_alter':
      // Put this module last.
      if (null !== $group = $implementations['localcdn'] ?? null) {
        unset($implementations['localcdn']);
        $implementations['localcdn'] = $group;
      }
  }
}

/**
 * Implements hook_menu().
 */
function localcdn_menu() {
  $items = [];
  $items['sites/%/files/localcdn/%/%'] = [
    /* @see _localcdn_deliver() */
    'page callback' => '_localcdn_deliver',
    'page arguments' => [1, 4, 5],
    'access callback' => true,
  ];
  return $items;
}

/**
 * @param string $name
 *
 * @return \Drupal\localcdn\Source\SourceInterface
 */
function _localcdn_load_source(string $name): ?SourceInterface {
  $cdns = _localcdn_sources();
  return $cdns[$name] ?? null;
}

/**
 * @return \Drupal\localcdn\Source\SourceInterface[]
 */
function _localcdn_sources() {
  static $cdns;
  return ($cdns !== null)
    ? $cdns
    : $cdns = module_invoke_all('localcdn_info');
}

/**
 * @param string $site_dir
 * @param string $source
 * @param array ...$fragments
 *
 * @see \image_style_deliver()
 */
function _localcdn_deliver(string $site_dir, string $source, ...$fragments) {

  $suffix = implode('/', $fragments);

  if (null === $cdn = _localcdn_load_source($source)) {
    /* @see \drupal_fast_404() */
    drupal_add_http_header('Status', '404 Not Found');
    $fast_404_html = variable_get('404_fast_html', '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL "@path" was not found on this server.</p></body></html>');
    // Replace @path in the variable with the page path.
    print strtr($fast_404_html, array('@path' => check_plain(request_uri())));
    exit;
  }

  $dest_path = conf_path() . '/files/localcdn/' . $source . '/' . $suffix;

  if (is_file($dest_path)) {
    $contents = file_get_contents($dest_path);
  }
  elseif (is_dir($dest_path)) {
    /* @see \drupal_fast_404() */
    drupal_add_http_header('Status', '404 Not Found');
    $fast_404_html = variable_get('404_fast_html', '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL "@path" was not found on this server.</p></body></html>');
    // Replace @path in the variable with the page path.
    print strtr($fast_404_html, array('@path' => check_plain(request_uri())));
    exit;
  }
  else {
    $query = $_GET;
    unset($query['q']);
    $url = $cdn->buildSourceUrl($suffix);

    $response = drupal_http_request($url);

    $contents = $response->data;

    _localcdn_process_file_contents($contents);

    $dest_pathinfo = pathinfo($dest_path);
    $dest_dir = $dest_pathinfo['dirname'];
    $mkdir_success = _localcdn_create_directory_recursive($dest_dir);

    if (!$mkdir_success) {
      // @todo Write to watchdog.
    }
    else {
      $write_success = file_put_contents($dest_path, $contents);

      if (!$write_success) {
        // @todo Write to watchdog.
      }
    }

  }

  $headers = $cdn->getHeaders($suffix);

  foreach ($headers as $name => $value) {
    drupal_add_http_header($name, $value);
  }

  ob_end_clean();

  print $contents;
  # drupal_exit();

  // Suppress any shutdown output.
  ob_start();
  register_shutdown_function('ob_end_clean');

  drupal_exit();
}

/**
 * @param string $contents
 */
function _localcdn_process_file_contents(string &$contents) {

  foreach (_localcdn_sources() as $name => $source) {
    foreach ($source->getPrefixes() as $prefix) {
      $pattern = '@' . preg_quote($prefix, '@') . '[\w' . preg_quote('/?=%.-_', '@') . ']*@';
      $contents = (string)preg_replace_callback(
        $pattern,
        function(array $matches) use ($name, $source) {
          $suffixes = $source->urlsGetSuffixes([$matches[0]]);
          foreach ($suffixes as $url => $suffix) {
            if ($url === $matches[0]) {
              return url(conf_path() . '/files/localcdn/' . $name . '/' . $suffix);
            }
          }
          return $matches[0];
        },
        $contents);
    }
  }
}

/**
 * @param string $dir
 *
 * @return bool
 */
function _localcdn_create_directory_recursive(string $dir) {
  if (false === strpos($dir . '/', conf_path() . '/files/')) {
    return false;
  }
  if (is_dir($dir)) {
    return true;
  }
  $parent = dirname($dir);
  if ('' === $parent || '/' === $parent) {
    return false;
  }
  if (!is_dir($parent)) {
    if (!_localcdn_create_directory_recursive($parent)) {
      return false;
    }
  }
  if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    return false;
  }
  return true;
}

/**
 * @return array
 */
function localcdn_localcdn_info() {
  $info = [];
  $info['jsdelivr'] = new Source_GenericExternal(
    'https://cdn.jsdelivr.net/',
    [
      'cache-control' => 'public, max-age=31536000, s-maxage=31536000',
      'content-encoding' => 'br',
    ]);
  $info['fonts.googleapis.com'] = (new Source_ExternalWithQuery(
    'https://fonts.googleapis.com/',
    [
      'cache-control' => 'public, max-age=31536000, s-maxage=31536000',
      # 'content-encoding' => 'br',
      'content-type' => 'text/css; charset=utf-8',
    ]))
    ->withFileExtension('.css');
  $info['fonts.gstatic.com'] = new Source_GenericExternal(
    'https://fonts.gstatic.com/',
    [
      'cache-control' => 'public, max-age=31536000, s-maxage=31536000',
      'content-encoding' => 'br',
    ]);
  return $info;
}

/**
 * Implements hook_css_alter().
 *
 * @param array $css
 */
function localcdn_css_alter(array &$css) {
  # dpm($css);
  $urls = array_keys($css);
  $urls_map = array_flip($urls);
  foreach (_localcdn_sources() as $key => $source) {
    foreach ($source->urlsGetSuffixes($urls) as $url => $suffix) {
      if (null === $entry = $css[$url] ?? null) {
        continue;
      }
      if ('file' !== $entry['type'] ?? null) {
        continue;
      }
      if ($url !== $entry['data'] ?? null) {
        continue;
      }
      $index = $urls_map[$url];
      $replacement_url = url(conf_path() . '/files/localcdn/' . $key . '/' . $suffix);
      $css[$url]['data'] = $replacement_url;
      $urls[$index] = $replacement_url;
    }
  }

  $css = array_combine($urls, $css);

  return;
}

/**
 * Implements hook_js_alter().
 *
 * @param array $javascript
 */
function localcdn_js_alter(array &$javascript) {
  return;
}
